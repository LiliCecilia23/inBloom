{"version":3,"sources":["images/inbloom.png","images/planty.jpg","images/yourgarden.svg","utils/API.js","components/Login.js","pages/Home.js","components/Logout.js","components/Navbar.js","components/use-debounce.js","components/MoreInfoBtn.js","components/AddPlantBtn.js","components/PlantCard.js","pages/Garden.js","pages/NewUser.js","App.js","index.js"],"names":["module","exports","query","axios","get","plantData","post","userData","id","Login","Home","props","className","src","inbloom","user","setUser","clientId","buttonText","onSuccess","res","console","log","profileObj","email","API","then","data","onFailure","alert","cookiePolicy","isSignedIn","Logout","onLogoutSuccess","style","scope","width","height","theme","Navbar","useState","searchTerm","setSearchTerm","isSearching","setIsSearching","debouncedSearchTerm","value","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","plantName","results","setResults","tl","TimelineLite","from","x","opacity","ease","Power3","easeOut","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","htmlFor","placeholder","onChange","e","target","MoreInfoBtn","AddPlantBtn","common_name","displayName","image_url","img","trefle_id","plant","UserId","onClick","PlantCard","scientific_name","fakeImg","key","alt","Garden","handleGetPlants","Plants","gardenHeader","map","result","NewUser","to","App","JSON","parse","sessionStorage","getItem","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4147429c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/inbloom.c82f97ad.png\";","module.exports = __webpack_public_path__ + \"static/media/planty.4413f528.jpg\";","module.exports = __webpack_public_path__ + \"static/media/yourgarden.8f83f4cd.svg\";","import axios from \"axios\";\n\n\nexport default {\n  // search by plant name\n  // searchPlants: function(plantName) {\n  //   console.log(\"THIS IS A PLANTNAME \" + plantName);\n  //   return axios.get(\"/search/\" + plantName);\n  // },\n\n  // // get plant details by id\n  // plantDetail: function(id) {\n  //   return axios.get(\"/plant/\" + id);\n  // },\n\n    searchPlants: (query) => {\n        return axios.get('/api/trefle/search/'+ query);\n      },\n    //     const plantName = req;\n    //     console.log(\"THIS IS THE NAME \" + plantName);\n    //     const Url = `https://trefle.io/api/v1/plants/search?q=${plantName}/?token=YAJT0mak-g3CsuHS4YDL0iQPaeNCXHGRiwju5gkz-zM`;\n    //     console.log(\"THE DUMB URL \" + Url)\n    //     axios.get(Url, {\n    //       // params: {\n    //       //   plantName: plantName\n    //       // }\n    //     })\n    //     .then((result) => {\n    //         res.json(result.data.items);\n    //     }).catch(err => {\n    //         console.log(err);\n    //     });\n    \n\n    plantDetail : function (req, res) {\n        const plantID = req.params.id;\n        const Url = `https://trefle.io/api/v1/plants/${plantID}?token=${process.env.TREFFLE_KEY}`;\n        \n\n        axios.get(Url).then((result) => {\n            res.json(result.data.items);\n        }).catch(err => {\n            console.log(err);\n        });\n    },\n    // add plant\n    addPlant: function(plantData) {\n      return axios.post(\"/api/plant\", plantData);\n    },\n\n    // find user by email\n    // findByEmail: function (email) {\n    //   return axios.get()\n    // },\n\n    // post request using userData from google\n    signInUser: function (userData) {\n      return axios.post(\"/api/user\", userData)\n    },\n\n    searchUserById: function (id) {\n      return axios.get(\"/api/user/\" + id)\n    }\n\n    \n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GoogleLogin } from 'react-google-login';\nimport { Redirect } from 'react-router-dom';\nimport axios from 'axios';\nimport API from '../utils/API';\n// import { refreshTokenSetup } from '../utils/refreshToken';\n\nconst clientId = \"21199057526-pc5p89vu1fos35ufcd9m597mmd84aq88.apps.googleusercontent.com\";\n\n\nfunction Login(props) {\n\n\n    const onSuccess = (res) => {\n        console.log(\"[Login Success] currentUser:\", res.profileObj)\n        let userEmail = res.profileObj.email;\n        console.log(res);\n        // without authentication on the backend\n        // make api call to /api/loogin db.user.findone if one doesn't exist with googleid pass profileobj to backend and create a user with google info from state. if there is respond true, don't create new one. \n        // in callback function from api, run line below (21) to update state\n        // props.setUser(res.profileObj);\n\n// this is incorporating the backend\n\n// in future, only pass the token id @ 27 for server side authentication\nAPI.signInUser(res.profileObj).then(res=>{\n    props.setUser(res.data);\n})\n        \n    };\n\n    const onFailure = (res) => {\n        console.log(\"[Login failed] res: \", res);\n        alert(\"invalid user\");\n    };\n\n    return (\n        <div>\n            {/* the login button */}\n            <GoogleLogin \n                clientId={clientId}\n                buttonText=\"Login\"\n                onSuccess={onSuccess}\n                onFailure={onFailure}\n                cookiePolicy={\"single_host_origin\"}\n                isSignedIn={true}\n            />\n        </div>\n    );\n}\n\nexport default Login;","import React from \"react\";\nimport Login from \"../components/Login\";\nimport { GoogleLogin } from 'react-google-login';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport inbloom from \"../images/inbloom.png\";\n// import monstera1 from \"../images/monstera1.png\"\nimport API from '../utils/API';\nconst clientId = \"21199057526-pc5p89vu1fos35ufcd9m597mmd84aq88.apps.googleusercontent.com\";\n\n\n\nfunction Home(props) {\n    const onSuccess = (res) => {\n        console.log(\"[Login Success] currentUser:\", res.profileObj)\n        let userEmail = res.profileObj.email;\n        console.log(res);\n        // without authentication on the backend\n        // make api call to /api/loogin db.user.findone if one doesn't exist with googleid pass profileobj to backend and create a user with google info from state. if there is respond true, don't create new one. \n        // in callback function from api, run line below (21) to update state\n        // props.setUser(res.profileObj);\n\n        // this is incorporating the backend\n\n        // in future, only pass the token id @ 27 for server side authentication\n        API.signInUser(res.profileObj).then(res=>{\n        props.setUser(res.data);\n        })\n    };\n    const onFailure = (res) => {\n        console.log(\"[Login failed] res: \", res);\n        alert(\"invalid user\");\n    };\n   \n    return(\n     \n        <div>\n            {/* <img className=\"monstera\" src={monstera1}></img> */}\n            {/* the header of the homepage  */}\n            <div className=\"jumbotron bg-transparent text-center\">\n                <img className=\"inbloom\" src={inbloom}></img>\n                \n            </div>\n            {/* the google sign in button/established users */}\n            <div className=\"container m-5 col-4 mx-auto text-center\">\n                {/* <h3 className=\"lead m-5\">Sign In</h3> */}\n                \n               { !props.user && <GoogleLogin \n                setUser={props.setUser}\n                clientId={clientId}\n                buttonText=\"Login\"\n                onSuccess={onSuccess}\n                onFailure={onFailure}\n                cookiePolicy={\"single_host_origin\"}\n                isSignedIn={true}\n            />  }\n\n\n                {/* Not needed for MVP */}\n                {/* this is will the new user button to trigger the new user routes */}\n                {/* <h3 className=\"m-5\">Create Account</h3>\n                <button className=\"btn btn-outline-success\">\n                    <Link to={\"/newuser\"} />\n                    Welcome\n                </button> */}\n\n\n            </div>\n        </div>\n    )\n}\n\nexport default Home;","import React from \"react\";\nimport { GoogleLogout } from \"react-google-login\";\n\nconst clientId = \"21199057526-pc5p89vu1fos35ufcd9m597mmd84aq88.apps.googleusercontent.com\";\n\nfunction Logout() {\n    \n    const onSuccess = () => {\n        alert(\"Logout made successfully\");\n    };\n\n    return(\n        <div>\n            <GoogleLogout \n            clientId={clientId}\n            buttonText=\"Logout\"\n            onLogoutSuccess={onSuccess}\n            style={{\n                scope: \"profile\",\n                width: \"240\",\n                height: \"50\",\n                'longtitle': \"true\",\n                theme: \"dark\"\n            }}\n        ></GoogleLogout>\n        </div>\n    );\n\n}\n\nexport default Logout;","import React, { useState, useEffect } from 'react';\nimport useDebounce from \"./use-debounce\";\nimport { gsap, TimelineLite, Power3 } from 'gsap';\nimport Logout from './Logout';\nimport API from '../utils/API';\n\nfunction Navbar(props) {\n\n    // const [searchState, setSearchState] = useState({\n    //   plantName : \" \",\n    //   searchResults : []\n    // })\n    // State and setter for search term\n    const [searchTerm, setSearchTerm] = useState('');\n  \n    // State for search status (whether there is a pending API request)\n    const [isSearching, setIsSearching] = useState(false);\n\n    // Now we call our hook, passing in the current searchTerm value.\n    // The hook will only return the latest value (what we passed in) ...\n    // ... if it's been more than 500ms since it was last called.\n    // Otherwise, it will return the previous value of searchTerm.\n    // The goal is to only have the API call fire when user stops typing ...\n    // ... so that we aren't hitting our API rapidly.\n    const debouncedSearchTerm = useDebounce(searchTerm, 500);\n\n    // Here's where the API call happens\n    // We use useEffect since this is an asynchronous action\n    useEffect(\n      () => {\n        const plantName = debouncedSearchTerm;\n        console.log(\"PLANT NAME\" + plantName)\n        // Make sure we have a value (user has entered something in input)\n        if (debouncedSearchTerm) {\n          console.log(\"STUPID RESULTS\" + debouncedSearchTerm);\n          // Set isSearching state\n          setIsSearching(true);\n          // Fire off our API call\n          API.searchPlants(plantName).then(results => {\n            // Set back to false since request finished\n            setIsSearching(false);\n            // Set results state\n            console.log(results.data)\n            props.setResults(results.data);\n            props.setIsSearching(true);\n          });\n        } else {\n          props.setResults([]);\n        }\n\n      },\n      // This is the useEffect input array\n      // Our useEffect function will only execute if this value changes ...\n      // ... and thanks to our hook it will only change if the original ...\n      // value (searchTerm) hasn't changed for more than 500ms.\n      [debouncedSearchTerm]\n    );\n\n\n    let tl = new TimelineLite({ delay: 0.8 })\n\n    useEffect(() => {\n\n        tl.from('.homes', { x: 15, opacity: 0, ease: Power3.easeOut, delay: 0.1 }, 'Start')\n        tl.from('.search', { x: 15, opacity: 0, ease: Power3.easeOut, delay: 0.2 }, 'Start')\n        tl.from('.contact', { x: 15, opacity: 0, ease: Power3.easeOut, delay: 0.3 }, 'Start')\n    }, []);\n\n    // function handleFormSubmit() {\n    //   API.searchPlants(searchState.plantName, (result, err) => {\n    //     if (!err) {\n    //       const searchResults = result.map((plant) => {\n    //         <option value={plant.plantName}></option>\n    //       })\n    //     }\n    //   })\n\n    // };\n\n\n    return (\n\n      <nav id=\"navbar\" className=\"navbar navbar-expand-lg navbar-light bg-light mt-n5\">\n        <a id=\"navbar-title\" className=\"navbar-brand homes text-success\" href=\"#\">inBloom</a>\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse justify-content-end\" id=\"navbarNav\">\n          <ul className=\"navbar-nav\">\n            <li className=\"nav-item active search\">\n            <form className=\"form-inline\">\n                <div className=\"form-group mx-sm-3 mb-2\">\n                  <label htmlFor=\"plantSearch\" className=\"sr-only\">Search : </label>\n                  <input type=\"search\" className=\"form-control\" id=\"plantSearch\" placeholder=\"Search by plant name...\" onChange={e => setSearchTerm(e.target.value)}/>\n                  {isSearching && <div>Searching...</div>}\n                 \n                </div>\n                {/* <button \n                  type=\"submit\" \n                  class=\"btn btn-success mb-2 mx-4\"\n                  // onClick={handleFormSubmit}\n                  >\n                    Search Plants\n                </button> */}\n            </form>\n            </li>\n            <li className=\"nav-item contact\">\n              <Logout />\n            </li>\n          </ul>\n        </div>\n      </nav>\n\n    )\n};\n\nexport default Navbar;\n","import React, {useState, useEffect} from \"react\";\n\n// Our hook\nexport default function useDebounce(value, delay) {\n\n    // State and setters for debounced value\n    const [debouncedValue, setDebouncedValue] = useState(value);\n\n    useEffect (\n        () => {\n            // Set debouncedValue to value (passed in) after the specified delay\n            const handler = setTimeout(() => {\n                setDebouncedValue(value);\n            }, delay);\n\n            // Return a cleanup function that will be called every time ...\n            // ... useEffect is re-called. useEffect will only be re-called ...\n            // ... if value changes (see the inputs array below). \n            // This is how we prevent debouncedValue from changing if value is ...\n            // ... changed within the delay period. Timeout gets cleared and restarted.\n            // To put it in context, if the user is typing within our app's ...\n            // ... search box, we don't want the debouncedValue to update until ...\n            // ... they've stopped typing for more than 500ms.\n\n            return () => {\n                clearTimeout(handler);\n            };\n        },\n        // Only re-call effect if value changes\n        // You could also add the \"delay\" var to inputs array if you ...\n        // ... need to be able to change that dynamically.\n        [value]\n    );\n\n    return debouncedValue;\n}","import React from \"react\";\n\n\nfunction MoreInfoBtn() {\n\n    return(\n        <div>\n            <button className=\"btn\">More Info</button>\n        </div>   \n        \n        \n    )\n}\n\nexport default MoreInfoBtn;","import React from \"react\";\nimport API from \"../utils/API\";\n\nfunction AddPlantBtn(props) {\n\n    let data = {\n        common_name: props.displayName,\n        image_url: props.img,\n        trefle_id: props.plant.id,\n        UserId: props.user\n    }\n\n    function onClick () {\n        API.addPlant(data).then(res=>{\n            console.log(res.data.common_name + \" added to your garden!\");\n            // we should add a toast or popup to show that the plant was added to the user's garden\n        })\n        \n    };\n      \n    return (\n        <div>\n            <button className=\"btn\" onClick={onClick}>Add to Your Garden</button>\n        </div>\n    )\n\n}\n\nexport default AddPlantBtn;","import React from \"react\";\nimport MoreInfoBtn from \"./MoreInfoBtn\";\nimport AddPlantBtn from \"./AddPlantBtn\";\nimport fakeImg from \"../images/planty.jpg\";\n\nfunction PlantCard(props) {\n\n    let displayName; \n    let img;\n    \n    if (props.plant.common_name){\n        displayName = props.plant.common_name\n    } else {\n        displayName = props.plant.scientific_name\n    }\n\n    if (!props.plant.image_url){\n        img = fakeImg;\n    } else {\n        img = props.plant.image_url\n    }\n\n    return(\n        \n                <div className=\"card m-2 p-2\" key={props.plant.id} style={{width: \"350px\"}}>\n                    <h3 className=\"card-title\">{displayName}</h3>\n                    <img src={img} className=\"card-img-top mx-auto\" alt={props.plant.scientific_name} />\n                        {props.isSearching && <AddPlantBtn plant={props.plant} displayName={displayName} user={props.user} img={img}/>}\n                        <MoreInfoBtn />\n                </div>\n \n\n    );\n};\n\nexport default PlantCard;","import React, { useState, useEffect } from \"react\";\nimport Navbar from \"../components/Navbar\";\nimport PlantCard from \"../components/PlantCard\";\nimport gardenHeader from \"../images/yourgarden.svg\"\nimport API from \"../utils/API\";\n\nfunction Garden(props) {\n\n     // State and setter for search results\n   const [results, setResults] = useState([]);\n   const [isSearching, setIsSearching] = useState(false);\n   \n   useEffect(() => {\n      console.log(props.user.id)\n      // API.searchUserById(props.user.id)\n      //    .then(res => {\n      //       setResults(res.data.Plants)\n      //    })\n      handleGetPlants();\n   }, [])\n \n   const handleGetPlants = () => {\n      API.searchUserById(props.user.id)\n      .then(results => {\n         setResults(results.data.Plants);\n         setIsSearching(false);\n     });\n   }\n   \n   console.log(results)\n   return (\n      <div className=\"garden-body\">\n         <div className=\"jumbotron garden-jumbo\">\n            <img className=\"gardenHeader\" src={gardenHeader}></img>\n         </div>\n         <Navbar setResults={setResults} results={results} setIsSearching={setIsSearching} /> \n            {/* we'll want to re-style this button, this is just a placeholder for functionality */}\n            {isSearching && <button onClick={handleGetPlants}>Back to Garden</button>}\n         <div id=\"plant-cards\" className=\"row p-3 mb-5\">\n        \n        {/* trigger a modal with belows results that you can add to the garden */}\n\n         {results.map(result => (\n                    \n            <PlantCard key={result.id} plant={result} user={props.user.id} isSearching={isSearching} />\n               \n         ))}\n\n      {/* this can show saved ones */}\n\n        {/* <div className=\"container p-3 mb-5 rounded text-center mx-auto\" style={{width: \"fit-content\"}}>\n            {plants.map(plant => (\n               <PlantCard plant={setPlants.savedPlants} />\n            ))}\n        </div> */}\n        </div>\n      </div>\n   )\n\n};\n\nexport default Garden;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Navbar from \"../components/Navbar\"\n\nfunction NewUser() {\n\n    return(\n        <div>\n            <Navbar/>\n        <div className=\"container\">\n            <h1 className=\"text-center m-2\">Welcome to inBloom!</h1>\n            <div className=\"input-group mb-3\">\n                <input type=\"text\" className=\"form-control\" placeholder=\"First Name\" aria-label=\"Username\"/>\n            </div>\n            <div className=\"input-group mb-3\">\n                <input type=\"text\" className=\"form-control\" placeholder=\"Last Name\" aria-label=\"Recipient's username\"/>\n            </div>\n            <button className=\"btn btn-outline-success\">\n                <Link to={\"/search\"} /> \n                    Add your plants!\n            </button>\n        </div>\n        </div>\n    )\n\n\n        //like a step by step form group??\n        //1. Go to the search plants page\n        //2. Either submit a photo to search or search by \"common name??\"\n        //3. Find your plant and then add it to your garden.\n    \n}\n\nexport default NewUser;","import React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Route, Switch, Link } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport './App.css';\nimport PlantsPage from \"./pages/Garden\";\nimport NewUser from \"./pages/NewUser\";\n\nfunction App() {\n\n  const [user, setUser] = useState();\n  useEffect(() => {\n    setUser(JSON.parse(sessionStorage.getItem('userData')))\n  }, [])\n\n  return (\n    <Router>\n      <div>\n        {/* <Nav /> */}\n        {/* <nav>\n          <ul>\n            <li className='nav-item'>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li className='nav-item'>\n              <Link to=\"/plants\">Plants</Link>\n            </li>\n            <li className='nav-item'>\n              <Link to=\"/newuser\">Users</Link>\n            </li>\n          </ul>\n        </nav> */}\n\n\n        {/*  if they're not logged in */}\n        \n       { !user && <Switch> \n          <Route exact path={\"/\"}>\n            <Home setUser={setUser} user={user}/>\n          </Route>\n          <Route exact path={\"/newuser\"}>\n            <NewUser />\n          </Route>\n        </Switch>}\n\n        {/* if they're logged in they can access this */}\n\n        {user && <Switch>\n          <Route exact path={\"/\"}>\n            {/* <Home user={user}/> */}\n            <PlantsPage setUser={setUser} user={user}/>\n            {/* <Link to=\"/plants\">Plants</Link> */}\n          </Route>\n          {/* <Route exact path={\"/plants\"}>\n            <PlantsPage setUser={setUser} user={user}/>\n          </Route> */}\n          \n          </Switch>}\n\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}