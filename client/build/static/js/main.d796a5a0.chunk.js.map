{"version":3,"sources":["images/inbloom.png","images/planty.jpg","images/yourgarden.svg","utils/API.js","components/Login.js","pages/Home.js","components/Logout.js","components/Button.js","components/Navbar.js","components/use-debounce.js","components/AddPlantBtn.js","components/InfoContainer.js","components/CareContainer.js","components/PlantInfo.js","components/MoreInfoBtn.js","components/PlantCard.js","pages/Garden.js","pages/NewUser.js","App.js","index.js"],"names":["module","exports","query","axios","get","id","plantData","post","userData","Login","Home","props","className","src","inbloom","user","setUser","clientId","buttonText","onSuccess","res","console","log","profileObj","email","API","then","data","onFailure","alert","cookiePolicy","isSignedIn","Logout","onLogoutSuccess","style","scope","width","height","theme","Button","type","onClick","text","Navbar","useState","searchTerm","setSearchTerm","isSearching","setIsSearching","setUserGarden","debouncedSearchTerm","value","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","plantName","results","setResults","tl","TimelineLite","from","x","opacity","ease","Power3","easeOut","href","userGarden","handleGetPlants","data-toggle","data-target","aria-controls","aria-expanded","aria-label","htmlFor","placeholder","onChange","e","target","AddPlantBtn","common_name","displayName","image_url","img","trefle_id","UserId","InfoContainer","edible","flower","growthform","growthhabit","growthrate","avgheight","maxheight","toxicity","CareContainer","phmin","phmax","light","bloommonths","growthmonths","humidity","minwater","maxwater","rootdepth","mintemp","maxtemp","soilnutriments","soilsalinity","soiltexture","soilhumidity","PlantInfo","sciName","plantres","scientific_name","main_species","Modal","size","aria-labelledby","centered","Header","closeButton","Title","displayname","Body","alt","color","specifications","growth_form","growth_habit","growth_rate","average_height","cm","maximum_height","growth","ph_maximum","ph_minimum","bloom_months","growth_months","atmospheric_humidity","minimum_precipitation","mm","maximum_precipitation","minimum_root_depth","minimum_temperature","deg_f","maximum_temperature","soil_nutriments","soil_salinity","soil_texture","soil_humidity","Footer","onHide","MoreInfoBtn","React","modalShow","setModalShow","plantRes","setPlantRes","plantID","plantId","variant","result","show","PlantCard","plant","fakeImg","key","Garden","Plants","gardenHeader","map","NewUser","to","App","JSON","parse","sessionStorage","getItem","exact","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d796a5a0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/inbloom.c82f97ad.png\";","module.exports = __webpack_public_path__ + \"static/media/planty.4413f528.jpg\";","module.exports = __webpack_public_path__ + \"static/media/yourgarden.8f83f4cd.svg\";","import axios from \"axios\";\n\n\nexport default {\n\n  searchPlants: (query) => {\n    return axios.get('/api/trefle/search/' + query);\n  },\n\n  plantDetail: (id) => {\n    return axios.get('/api/trefle/detail/' + id);\n  },\n\n\n  // add plant\n  addPlant: function (plantData) {\n    return axios.post(\"/api/plant\", plantData);\n  },\n\n  // post request using userData from google\n  signInUser: function (userData) {\n    return axios.post(\"/api/user\", userData)\n  },\n\n  searchUserById: function (id) {\n    return axios.get(\"/api/user/\" + id)\n  }\n\n\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GoogleLogin } from 'react-google-login';\nimport { Redirect } from 'react-router-dom';\nimport axios from 'axios';\nimport API from '../utils/API';\n// import { refreshTokenSetup } from '../utils/refreshToken';\n\nconst clientId = \"21199057526-pc5p89vu1fos35ufcd9m597mmd84aq88.apps.googleusercontent.com\";\n\n\nfunction Login(props) {\n\n\n    const onSuccess = (res) => {\n        console.log(\"[Login Success] currentUser:\", res.profileObj)\n        let userEmail = res.profileObj.email;\n        console.log(res);\n        // without authentication on the backend\n        // make api call to /api/loogin db.user.findone if one doesn't exist with googleid pass profileobj to backend and create a user with google info from state. if there is respond true, don't create new one. \n        // in callback function from api, run line below (21) to update state\n        // props.setUser(res.profileObj);\n\n// this is incorporating the backend\n\n// in future, only pass the token id @ 27 for server side authentication\nAPI.signInUser(res.profileObj).then(res=>{\n    props.setUser(res.data);\n})\n        \n    };\n\n    const onFailure = (res) => {\n        console.log(\"[Login failed] res: \", res);\n        alert(\"invalid user\");\n    };\n\n    return (\n        <div>\n            {/* the login button */}\n            <GoogleLogin \n                clientId={clientId}\n                buttonText=\"Login\"\n                onSuccess={onSuccess}\n                onFailure={onFailure}\n                cookiePolicy={\"single_host_origin\"}\n                isSignedIn={true}\n            />\n        </div>\n    );\n}\n\nexport default Login;","import React from \"react\";\nimport Login from \"../components/Login\";\nimport { GoogleLogin } from 'react-google-login';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport inbloom from \"../images/inbloom.png\";\n// import monstera1 from \"../images/monstera1.png\"\nimport API from '../utils/API';\nconst clientId = \"21199057526-pc5p89vu1fos35ufcd9m597mmd84aq88.apps.googleusercontent.com\";\n\n\n\nfunction Home(props) {\n    const onSuccess = (res) => {\n        console.log(\"[Login Success] currentUser:\", res.profileObj)\n        let userEmail = res.profileObj.email;\n        console.log(res);\n        // without authentication on the backend\n        // make api call to /api/loogin db.user.findone if one doesn't exist with googleid pass profileobj to backend and create a user with google info from state. if there is respond true, don't create new one. \n        // in callback function from api, run line below (21) to update state\n        // props.setUser(res.profileObj);\n\n        // this is incorporating the backend\n\n        // in future, only pass the token id @ 27 for server side authentication\n        API.signInUser(res.profileObj).then(res=>{\n        props.setUser(res.data);\n        })\n    };\n    const onFailure = (res) => {\n        console.log(\"[Login failed] res: \", res);\n        alert(\"invalid user\");\n    };\n   \n    return(\n     \n        <div>\n            {/* <img className=\"monstera\" src={monstera1}></img> */}\n            {/* the header of the homepage  */}\n            <div className=\"jumbotron bg-transparent text-center\">\n                <img className=\"inbloom\" src={inbloom}></img>\n                \n            </div>\n            {/* the google sign in button/established users */}\n            <div className=\"container m-5 col-4 mx-auto text-center\">\n                {/* <h3 className=\"lead m-5\">Sign In</h3> */}\n                \n               { !props.user && <GoogleLogin \n                setUser={props.setUser}\n                clientId={clientId}\n                buttonText=\"Login\"\n                onSuccess={onSuccess}\n                onFailure={onFailure}\n                cookiePolicy={\"single_host_origin\"}\n                isSignedIn={true}\n            />  }\n\n\n                {/* Not needed for MVP */}\n                {/* this is will the new user button to trigger the new user routes */}\n                {/* <h3 className=\"m-5\">Create Account</h3>\n                <button className=\"btn btn-outline-success\">\n                    <Link to={\"/newuser\"} />\n                    Welcome\n                </button> */}\n\n\n            </div>\n        </div>\n    )\n}\n\nexport default Home;","import React from \"react\";\nimport { GoogleLogout } from \"react-google-login\";\n\nconst clientId = \"21199057526-pc5p89vu1fos35ufcd9m597mmd84aq88.apps.googleusercontent.com\";\n\nfunction Logout() {\n    \n    const onSuccess = () => {\n        alert(\"Logout made successfully\");\n    };\n\n    return(\n        <div>\n            <GoogleLogout \n            clientId={clientId}\n            buttonText=\"Logout\"\n            onLogoutSuccess={onSuccess}\n            style={{\n                scope: \"profile\",\n                width: \"240\",\n                height: \"50\",\n                'longtitle': \"true\",\n                theme: \"dark\"\n            }}\n        ></GoogleLogout>\n        </div>\n    );\n\n}\n\nexport default Logout;","import React from \"react\";\n\nfunction Button(props) {\n\n    return (\n        <div>\n            <button type=\"button\" id={props.id} className={props.className} onClick={props.onClick}>{props.text}</button>\n        </div>\n    )\n\n}\n\nexport default Button;","import React, { useState, useEffect } from 'react';\nimport useDebounce from \"./use-debounce\";\nimport { gsap, TimelineLite, Power3 } from 'gsap';\nimport Logout from './Logout';\nimport API from '../utils/API';\nimport Button from \"../components/Button\";\n\nfunction Navbar(props) {\n\n    // const [searchState, setSearchState] = useState({\n    //   plantName : \" \",\n    //   searchResults : []\n    // })\n    // State and setter for search term\n    const [searchTerm, setSearchTerm] = useState('');\n  \n    // State for search status (whether there is a pending API request)\n    const [isSearching, setIsSearching] = useState(false);\n\n    const [userGarden, setUserGarden] = useState(true);\n    \n\n    // Now we call our hook, passing in the current searchTerm value.\n    // The hook will only return the latest value (what we passed in) ...\n    // ... if it's been more than 500ms since it was last called.\n    // Otherwise, it will return the previous value of searchTerm.\n    // The goal is to only have the API call fire when user stops typing ...\n    // ... so that we aren't hitting our API rapidly.\n    const debouncedSearchTerm = useDebounce(searchTerm, 500);\n\n    // Here's where the API call happens\n    // We use useEffect since this is an asynchronous action\n    useEffect(\n      () => {\n        const plantName = debouncedSearchTerm;\n        console.log(\"PLANT NAME\" + plantName)\n        // Make sure we have a value (user has entered something in input)\n        if (debouncedSearchTerm) {\n          console.log(\"STUPID RESULTS\" + debouncedSearchTerm);\n          // Set isSearching state\n          setIsSearching(true);\n          setUserGarden(true);\n          // Fire off our API call\n          API.searchPlants(plantName).then(results => {\n            // Set back to false since request finished\n            setIsSearching(false);\n            // Set results state\n            console.log(results.data)\n            props.setResults(results.data);\n            props.setIsSearching(false);\n            props.setUserGarden(false);\n          \n          });\n        } else {\n          props.setResults([]);\n        }\n\n      },\n      // This is the useEffect input array\n      // Our useEffect function will only execute if this value changes ...\n      // ... and thanks to our hook it will only change if the original ...\n      // value (searchTerm) hasn't changed for more than 500ms.\n      [debouncedSearchTerm]\n    );\n\n\n    let tl = new TimelineLite({ delay: 0.8 })\n\n    useEffect(() => {\n\n        tl.from('.homes', { x: 15, opacity: 0, ease: Power3.easeOut, delay: 0.1 }, 'Start')\n        tl.from('.search', { x: 15, opacity: 0, ease: Power3.easeOut, delay: 0.2 }, 'Start')\n        tl.from('.contact', { x: 15, opacity: 0, ease: Power3.easeOut, delay: 0.3 }, 'Start')\n    }, []);\n\n    // function handleFormSubmit() {\n    //   API.searchPlants(searchState.plantName, (result, err) => {\n    //     if (!err) {\n    //       const searchResults = result.map((plant) => {\n    //         <option value={plant.plantName}></option>\n    //       })\n    //     }\n    //   })\n\n    // };\n\n\n    return (\n\n      <nav id=\"navbar\" className=\"navbar navbar-expand-lg navbar-light bg-light mt-n5\">\n        <a id=\"navbar-title\" className=\"navbar-brand homes text-success\" href=\"#\">inBloom</a>\n        {/* {props.userGarden && <button>Back to Garden</button>}   */}\n        {!props.userGarden && <Button text=\"Back to Garden\" id=\"back-to-garden-btn\" className=\"btn btn-outline-success\" onClick={props.handleGetPlants}/>}\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse justify-content-end\" id=\"navbarNav\">\n          <ul className=\"navbar-nav\">\n            <li className=\"nav-item active search\">\n            <form className=\"form-inline\">\n                <div className=\"form-group mx-sm-3 mb-2\">\n                  <label htmlFor=\"plantSearch\" className=\"sr-only\">Search : </label>\n                  <input type=\"search\" className=\"form-control\" id=\"plantSearch\" placeholder=\"Search by plant name...\" onChange={e => setSearchTerm(e.target.value)}/>\n                  {isSearching && <div>Searching...</div>}\n                 \n                </div>\n                {/* <button \n                  type=\"submit\" \n                  class=\"btn btn-success mb-2 mx-4\"\n                  // onClick={handleFormSubmit}\n                  >\n                    Search Plants\n                </button> */}\n            </form>\n            </li>\n            <li className=\"nav-item contact\">\n              <Logout />\n            </li>\n          </ul>\n        </div>\n      </nav>\n\n    )\n};\n\nexport default Navbar;\n","import React, {useState, useEffect} from \"react\";\n\n// Our hook\nexport default function useDebounce(value, delay) {\n\n    // State and setters for debounced value\n    const [debouncedValue, setDebouncedValue] = useState(value);\n\n    useEffect (\n        () => {\n            // Set debouncedValue to value (passed in) after the specified delay\n            const handler = setTimeout(() => {\n                setDebouncedValue(value);\n            }, delay);\n\n            // Return a cleanup function that will be called every time ...\n            // ... useEffect is re-called. useEffect will only be re-called ...\n            // ... if value changes (see the inputs array below). \n            // This is how we prevent debouncedValue from changing if value is ...\n            // ... changed within the delay period. Timeout gets cleared and restarted.\n            // To put it in context, if the user is typing within our app's ...\n            // ... search box, we don't want the debouncedValue to update until ...\n            // ... they've stopped typing for more than 500ms.\n\n            return () => {\n                clearTimeout(handler);\n            };\n        },\n        // Only re-call effect if value changes\n        // You could also add the \"delay\" var to inputs array if you ...\n        // ... need to be able to change that dynamically.\n        [value]\n    );\n\n    return debouncedValue;\n}","import React from \"react\";\nimport API from \"../utils/API\";\n\nfunction AddPlantBtn(props) {\n\n    let data = {\n        common_name: props.displayName,\n        image_url: props.img,\n        trefle_id: props.id,\n        UserId: props.user\n    }\n\n    function onClick () {\n        API.addPlant(data).then(res=>{\n            console.log(res.data.common_name + \" added to your garden!\");\n            // we should add a toast or popup to show that the plant was added to the user's garden\n        })\n        \n    };\n      \n    return (\n        <div>\n            <button className=\"btn\" onClick={onClick}>Add to Your Garden</button>\n        </div>\n    )\n\n}\n\nexport default AddPlantBtn;","import React from \"react\";\n\nfunction InfoContainer(props) {\n  console.log(props);\n\n  return (\n    <div>\n      {props && (\n        <div>\n          <h5>General Info</h5>\n          <ul>\n            <li>Edible: {props.edible ? props.edible : \"Not Available\"}</li>\n            <li>Flower: {props.flower ? props.flower : \"Not Available\"}</li>\n            <li>\n              Growth Form:{\" \"}\n              {props.growthform ? props.growthform : \"Not Available\"}\n            </li>\n            <li>\n              Growth Habit:{\" \"}\n              {props.growthhabit ? props.growthhabit : \"Not Available\"}\n            </li>\n            <li>\n              Growth Rate:{\" \"}\n              {props.growthrate ? props.growthrate : \"Not Available\"}\n            </li>\n            <li>\n              Average Height:{\" \"}\n              {props.avgheight ? props.avgheight : \"Not Available\"}\n            </li>\n            <li>\n              Maximum Height:{\" \"}\n              {props.maxheight ? props.maxheight : \"Not Available\"}\n            </li>\n            <li>\n              Toxicity: {props.toxicity ? props.toxicity : \"Not Available\"}\n            </li>\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default InfoContainer;\n","import React from \"react\";\n\nfunction CareContainer(props) {\n  console.log(props);\n\n  return (\n    <div>\n      {props && (\n        <div>\n          <h5>Care Info</h5>\n          <ul>\n            <li>\n              Ph Range: {props.phmin ? props.phmin : \"Not Available\"} - {props.phmax ? props.phmax : \"Not Available\"}\n            </li>\n            <li>\n              Light: {props.light ? props.light : \"Not Available\"}\n            </li>\n            <li>\n              Bloom Months: {props.bloommonths ? props.bloommonths : \"Not Available\"}\n            </li>\n            <li>\n              Growth Months: {props.growthmonths ? props.growthmonths : \"Not Available\"}\n            </li>\n            <li>\n              Humidity: {props.humidity ? props.humidity : \"Not Available\"}\n            </li>\n            <li>\n              Precipitation Range: {props.minwater ? props.minwater : \"Not Available\"} mm - {props.maxwater ? props.maxwater : \"Not Available\"} mm\n            </li>\n            <li>\n              Root Depth: {props.rootdepth ? props.rootdepth : \"Not Available\"} cm\n            </li>\n            <li>\n              Temperature Range: {props.mintemp ? props.mintemp : \"Not Available\"}ºF - {props.maxtemp ? props.maxtemp : \"Not Available\"}ºF\n            </li>\n            <li>\n              Soil Nutriments (Fertilizer): {props.soilnutriments ? props.soilnutriments : \"Not Available\"}\n            </li>\n            <li>\n              Soil Salinity: {props.soilsalinity ? props.soilsalinity : \"Not Available\"}\n            </li>\n            <li>\n              Soil Texture: {props.soiltexture ? props.soiltexture : \"Not Available\"}\n            </li>\n            <li>\n              Soil Humidity: {props.soilhumidity ? props.soilhumidity : \"Not Available\"}\n            </li>\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default CareContainer;\n","import React from \"react\";\nimport AddPlantBtn from \"./AddPlantBtn\";\nimport InfoContainer from \"./InfoContainer\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport CareContainer from \"./CareContainer\";\nfunction PlantInfo(props) {\n  let sciName = \"\";\n  let edible = \"\";\n  let toxicity = \"\";\n\n  let plantData = {};\n  if (props.plantres) {\n    plantData = props.plantres;\n    if (props.plantres.data.common_name === null) {\n      sciName = \"\";\n    } else {\n      sciName = \"(\" + props.plantres.data.scientific_name + \")\";\n    }\n    if (props.plantres.data.main_species.edible === true) {\n      edible = \"Yes\";\n    } else if (!props.plantres.data.main_species.edible) {\n      edible = null;\n    } else {\n      edible = \"No\";\n    }\n    if (props.plantres.data.main_species.toxicity === true) {\n      toxicity = \"Yes\";\n    } else if (!props.plantres.data.main_species.toxicity) {\n      toxicity = null;\n    } else {\n      toxicity = \"No\";\n    }\n  } else {\n    plantData = null;\n  }\n\n  return (\n    <Modal\n      {...props}\n      size=\"lg\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          {props.displayname} {sciName}\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <img src={props.img} alt=\"plant\" style={{ width: \"400px\" }}></img>\n        <InfoContainer\n          id=\"infoContainer\"\n          edible={edible}\n          // distribution={props.plantres.data.main_species.native}\n          flower={props.plantres.data.main_species.flower.color}\n          growthform={\n            props.plantres.data.main_species.specifications.growth_form\n          }\n          growthhabit={\n            props.plantres.data.main_species.specifications.growth_habit\n          }\n          growthrate={\n            props.plantres.data.main_species.specifications.growth_rate\n          }\n          avgheight={\n            props.plantres.data.main_species.specifications.average_height.cm\n          }\n          maxheight={\n            props.plantres.data.main_species.specifications.maximum_height.cm\n          }\n          toxicity={toxicity}\n        ></InfoContainer>\n        <CareContainer\n          id=\"careContainer\"\n          phmax={props.plantres.data.main_species.growth.ph_maximum}\n          phmin={props.plantres.data.main_species.growth.ph_minimum}\n          bloommonths={props.plantres.data.main_species.growth.bloom_months}\n          light={props.plantres.data.main_species.growth.light}\n          growthmonths={props.plantres.data.main_species.growth.growth_months}\n          humidity={\n            props.plantres.data.main_species.growth.atmospheric_humidity\n          }\n          minwater={\n            props.plantres.data.main_species.growth.minimum_precipitation.mm\n          }\n          maxwater={\n            props.plantres.data.main_species.growth.maximum_precipitation.mm\n          }\n          rootdepth={props.plantres.data.main_species.growth.minimum_root_depth.cm}\n          mintemp={props.plantres.data.main_species.growth.minimum_temperature.deg_f}\n          maxtemp={props.plantres.data.main_species.growth.maximum_temperature.deg_f}\n          soilnutriments={\n            props.plantres.data.main_species.growth.soil_nutriments\n          }\n          soilsalinity={props.plantres.data.main_species.growth.soil_salinity}\n          soiltexture={props.plantres.data.main_species.growth.soil_texture}\n          soilhumidity={props.plantres.data.main_species.growth.soil_humidity}\n        ></CareContainer>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={props.onHide}>Close</Button>\n        <AddPlantBtn />\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nexport default PlantInfo;\n","import React from \"react\";\nimport PlantInfo from \"./PlantInfo\";\nimport Button from \"react-bootstrap/Button\";\nimport API from \"../utils/API\";\n\n\nfunction MoreInfoBtn(props) {\n    const [modalShow, setModalShow] = React.useState(false);\n    const [plantRes, setPlantRes] = React.useState();\n    let plantID = props.plantId;\n    \n  \n\n    function getInfo () {\n        API.plantDetail(plantID).then(result => {\n            setPlantRes(result);  \n        })\n    }\n return (\n   <div>\n     <Button variant=\"primary\" onClick={() => [setModalShow(true), getInfo()]}>\n       More Info\n     </Button>\n        {plantRes &&\n        <PlantInfo show={modalShow}\n        onHide={() => setModalShow(false)}\n        plantres={plantRes}\n        displayname={props.displayName}\n        img={props.img}\n        user={props.user}\n    />}\n     \n   </div>\n );\n}\n \nexport default MoreInfoBtn;\n","import React from \"react\";\nimport MoreInfoBtn from \"./MoreInfoBtn\";\nimport AddPlantBtn from \"./AddPlantBtn\";\nimport fakeImg from \"../images/planty.jpg\";\n\nfunction PlantCard(props) {\n  let displayName;\n  let img;\n\n  if (props.plant.common_name) {\n    displayName = props.plant.common_name;\n  } else {\n    displayName = props.plant.scientific_name;\n  }\n\n  if (!props.plant.image_url) {\n    img = fakeImg;\n  } else {\n    img = props.plant.image_url;\n  }\n  \n  return (\n    <div\n      className=\"card m-2 p-2\"\n      key={props.plant.id}\n      style={{ width: \"350px\" }}\n    >\n      <h3 className=\"card-title\">{displayName}</h3>\n      <img\n        src={img}\n        className=\"card-img-top\"\n        alt={props.plant.scientific_name}\n        style={{ height: \"350px\" }}\n      />\n      {props.isSearching && (\n        <AddPlantBtn\n          plant={props.plant}\n          displayName={displayName}\n          user={props.user}\n          img={img}\n        />\n      )}\n      <MoreInfoBtn\n        plant={props.plant}\n        plantId={props.plant.id}\n        displayName={displayName}\n        img={img}\n        user={props.user}\n      />\n    </div>\n  );\n}\n\nexport default PlantCard;\n","import React, { useState, useEffect } from \"react\";\nimport Navbar from \"../components/Navbar\";\nimport PlantCard from \"../components/PlantCard\";\nimport gardenHeader from \"../images/yourgarden.svg\"\nimport API from \"../utils/API\";\n\nfunction Garden(props) {\n\n     // State and setter for search results\n   const [results, setResults] = useState([]);\n   const [isSearching, setIsSearching] = useState(false);\n   const [userGarden, setUserGarden] = useState(true);\n\n   \n   useEffect(() => {\n      console.log(props.user.id)\n      // API.searchUserById(props.user.id)\n      //    .then(res => {\n      //       setResults(res.data.Plants)\n      //    })\n      handleGetPlants();\n   }, [])\n \n   const handleGetPlants = () => {\n      API.searchUserById(props.user.id)\n      .then(results => {\n         setResults(results.data.Plants);\n         setIsSearching(false);\n         setUserGarden(true);\n     });\n   }\n   \n   console.log(results)\n   return (\n      <div className=\"garden-body\">\n         <div className=\"jumbotron garden-jumbo\">\n            <img className=\"gardenHeader\" src={gardenHeader}></img>\n         </div>\n         <Navbar setResults={setResults} \n         results={results} \n         setIsSearching={setIsSearching} \n         setUserGarden={setUserGarden} \n         userGarden={userGarden} \n         handleGetPlants={handleGetPlants} /> \n         <div id=\"plant-cards\" className=\"row p-3 mb-5\">\n        \n        {/* trigger a modal with belows results that you can add to the garden */}\n\n         {results.map(result => (\n                    \n            <PlantCard key={result.id} plant={result} user={props.user.id} userGarden={userGarden} />\n               \n         ))}\n\n      {/* this can show saved ones */}\n\n        {/* <div className=\"container p-3 mb-5 rounded text-center mx-auto\" style={{width: \"fit-content\"}}>\n            {plants.map(plant => (\n               <PlantCard plant={setPlants.savedPlants} />\n            ))}\n        </div> */}\n        </div>\n      </div>\n   )\n\n};\n\nexport default Garden;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Navbar from \"../components/Navbar\"\n\nfunction NewUser() {\n\n    return(\n        <div>\n            <Navbar/>\n        <div className=\"container\">\n            <h1 className=\"text-center m-2\">Welcome to inBloom!</h1>\n            <div className=\"input-group mb-3\">\n                <input type=\"text\" className=\"form-control\" placeholder=\"First Name\" aria-label=\"Username\"/>\n            </div>\n            <div className=\"input-group mb-3\">\n                <input type=\"text\" className=\"form-control\" placeholder=\"Last Name\" aria-label=\"Recipient's username\"/>\n            </div>\n            <button className=\"btn btn-outline-success\">\n                <Link to={\"/search\"} /> \n                    Add your plants!\n            </button>\n        </div>\n        </div>\n    )\n\n\n        //like a step by step form group??\n        //1. Go to the search plants page\n        //2. Either submit a photo to search or search by \"common name??\"\n        //3. Find your plant and then add it to your garden.\n    \n}\n\nexport default NewUser;","import React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Route, Switch, Link } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport './App.css';\nimport PlantsPage from \"./pages/Garden\";\nimport NewUser from \"./pages/NewUser\";\n\nfunction App() {\n\n  const [user, setUser] = useState();\n  useEffect(() => {\n    setUser(JSON.parse(sessionStorage.getItem('userData')))\n  }, [])\n\n  return (\n    <Router>\n      <div>\n        {/* <Nav /> */}\n        {/* <nav>\n          <ul>\n            <li className='nav-item'>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li className='nav-item'>\n              <Link to=\"/plants\">Plants</Link>\n            </li>\n            <li className='nav-item'>\n              <Link to=\"/newuser\">Users</Link>\n            </li>\n          </ul>\n        </nav> */}\n\n\n        {/*  if they're not logged in */}\n        \n       { !user && <Switch> \n          <Route exact path={\"/\"}>\n            <Home setUser={setUser} user={user}/>\n          </Route>\n          <Route exact path={\"/newuser\"}>\n            <NewUser />\n          </Route>\n        </Switch>}\n\n        {/* if they're logged in they can access this */}\n\n        {user && <Switch>\n          <Route exact path={\"/\"}>\n            {/* <Home user={user}/> */}\n            <PlantsPage setUser={setUser} user={user}/>\n            {/* <Link to=\"/plants\">Plants</Link> */}\n          </Route>\n          {/* <Route exact path={\"/plants\"}>\n            <PlantsPage setUser={setUser} user={user}/>\n          </Route> */}\n          \n          </Switch>}\n\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n    <App />\n ,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}